DESIRED_L = 10 # Length of the tail of the death distribution, in days. For all results paper, this was 20.
MTTD = 8 # Mean Time To Death
COUNTRY1 = "China"
COUNTRY2 = "Italy"
set.seed(0) #For reproducibility. Can be changed without affecting anything.
min.cases <- 100
coronadata = generate_coronamat(COUNTRY1,COUNTRY2)
coronadata
# Remove row of all 0 from Italy
if(COUNTRY2 == "Italy") {
coronadata = coronadata[-98,]
coronadata = coronadata[-115,]
}
coronadata
rm(list = ls())
library("dplyr")
library("RcppCNPy")
source("./reich/CFR_estimation.R")
source("./R/jh_process.R")
source("./R/generate_coronamat.R")
# Parameters
DESIRED_L = 10 # Length of the tail of the death distribution, in days. For all results paper, this was 20.
MTTD = 8 # Mean Time To Death
COUNTRY1 = "China"
COUNTRY2 = "Italy"
set.seed(0) #For reproducibility. Can be changed without affecting anything.
min.cases <- 100
coronadata = generate_coronamat(COUNTRY1,COUNTRY2)
# Remove row of all 0 from Italy
if(COUNTRY2 == "Italy") {
coronadata = coronadata[-98,]
coronadata = coronadata[-114,]
}
coronadata
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
coronadata
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
coronadata
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
coronadata
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
coronadata
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
data
data["new.times",]
data[,"new.times"]
data[35,"new.times"]
data[35:66,"new.times"]
data[35:66,"new.times"]=c(rep(NA,31))
data[35:66,"new.times"]=NA
data[35:66,"new.times"]
data[2:33,"new.times"] = 1:32
data
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
rm(list = ls())
library("dplyr")
library("RcppCNPy")
source("./reich/CFR_estimation.R")
source("./R/jh_process.R")
source("./R/generate_coronamat.R")
source("./reindex_time.R")
# Parameters
DESIRED_L = 20 # Length of the tail of the death distribution, in days. For all results paper, this was 20.
MTTD = 8 # Mean Time To Death
COUNTRY1 = "China"
COUNTRY2 = "Italy"
set.seed(0) #For reproducibility. Can be changed without affecting anything.
min.cases <- 100
#assumed.nu=pnorm(x,mean=MTTD,sd=8.0)
assumed.nu = c(rep(0,5),rep(1,10),rep(0,5))
assumed.nu = assumed.nu/sum(assumed.nu)
data = generate_coronamat(COUNTRY1,COUNTRY2)
# Remove row of all 0 from Italy
#if(COUNTRY2 == "Italy") {
#  data = data[-99,]
#  data = data[-115,]
#}
data = reindex_time(data)
data = data[ (data[,"N"] > 0) | (data[,"new.times"] != NA)  ]
data
# Remove row of all 0 from Italy
#if(COUNTRY2 == "Italy") {
#  data = data[-99,]
#  data = data[-115,]
#}
data = reindex_time(data)
data = data[ (data[,"N"] > 0) | (data[,"new.times"] != NA),  ]
data = generate_coronamat(COUNTRY1,COUNTRY2)
# Remove row of all 0 from Italy
#if(COUNTRY2 == "Italy") {
#  data = data[-99,]
#  data = data[-115,]
#}
data = reindex_time(data)
data = data[ (data[,"N"] > 0) | (data[,"new.times"] != NA),  ]
data
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
data
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
rm(list = ls())
library("dplyr")
library("RcppCNPy")
source("./reich/CFR_estimation.R")
source("./R/jh_process.R")
source("./R/generate_coronamat.R")
source("./reindex_time.R")
# Parameters
DESIRED_L = 20 # Length of the tail of the death distribution, in days. For all results paper, this was 20.
MTTD = 8 # Mean Time To Death
COUNTRY1 = "China"
COUNTRY2 = "Italy"
set.seed(0) #For reproducibility. Can be changed without affecting anything.
min.cases <- 100
#assumed.nu=pnorm(x,mean=MTTD,sd=8.0)
assumed.nu = c(rep(0,5),rep(1,10),rep(0,5))
assumed.nu = assumed.nu/sum(assumed.nu)
data = generate_coronamat(COUNTRY1,COUNTRY2)
# Remove row of all 0 from Italy
#if(COUNTRY2 == "Italy") {
#  data = data[-99,]
#  data = data[-115,]
#}
data = reindex_time(data)
data = data[ ((data[,"N"] > 0) | is.na(data[,"new.times"])) & (data >= 0),  ]
data >= 0
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
data
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
T
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
rm(list = ls())
library("dplyr")
library("RcppCNPy")
source("./reich/CFR_estimation.R")
source("./R/jh_process.R")
source("./R/generate_coronamat.R")
source("./reindex_time.R")
# Parameters
DESIRED_L = 20 # Length of the tail of the death distribution, in days. For all results paper, this was 20.
MTTD = 8 # Mean Time To Death
COUNTRY1 = "China"
COUNTRY2 = "Italy"
set.seed(0) #For reproducibility. Can be changed without affecting anything.
min.cases <- 100
#assumed.nu=pnorm(x,mean=MTTD,sd=8.0)
assumed.nu = c(rep(0,5),rep(1,10),rep(0,5))
assumed.nu = assumed.nu/sum(assumed.nu)
data = generate_coronamat(COUNTRY1,COUNTRY2)
# Remove row of all 0 from Italy
#if(COUNTRY2 == "Italy") {
#  data = data[-99,]
#  data = data[-115,]
#}
data = reindex_time(data)["data"]
data = data[ ((data[,"N"] > 0) | is.na(data[,"new.times"])) & (data[,"D"]>=0),  ]
data
data[,"D"]>0
data[,"N"]>0
data
data[,"D"]
data["D"]
data["D",]
data[,"D"]
View(data)
data[1]
data[1,1]
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
data
data[1]
data[2]
data[[1]]
data[[1]]
rm(list = ls())
library("dplyr")
library("RcppCNPy")
source("./reich/CFR_estimation.R")
source("./R/jh_process.R")
source("./R/generate_coronamat.R")
source("./reindex_time.R")
# Parameters
DESIRED_L = 20 # Length of the tail of the death distribution, in days. For all results paper, this was 20.
MTTD = 8 # Mean Time To Death
COUNTRY1 = "China"
COUNTRY2 = "Italy"
set.seed(0) #For reproducibility. Can be changed without affecting anything.
min.cases <- 100
#assumed.nu=pnorm(x,mean=MTTD,sd=8.0)
assumed.nu = c(rep(0,5),rep(1,10),rep(0,5))
assumed.nu = assumed.nu/sum(assumed.nu)
data = generate_coronamat(COUNTRY1,COUNTRY2)
# Remove row of all 0 from Italy
#if(COUNTRY2 == "Italy") {
#  data = data[-99,]
#  data = data[-115,]
#}
data = reindex_time(data)["data"][[1]]
data = data[ ((data[,"N"] > 0) | is.na(data[,"new.times"])) & (data[,"D"]>=0),  ]
data
out_list = reindex_time(data)
rm(list = ls())
library("dplyr")
library("RcppCNPy")
source("./reich/CFR_estimation.R")
source("./R/jh_process.R")
source("./R/generate_coronamat.R")
source("./reindex_time.R")
# Parameters
DESIRED_L = 20 # Length of the tail of the death distribution, in days. For all results paper, this was 20.
MTTD = 8 # Mean Time To Death
COUNTRY1 = "China"
COUNTRY2 = "Italy"
set.seed(0) #For reproducibility. Can be changed without affecting anything.
min.cases <- 100
#assumed.nu=pnorm(x,mean=MTTD,sd=8.0)
assumed.nu = c(rep(0,5),rep(1,10),rep(0,5))
assumed.nu = assumed.nu/sum(assumed.nu)
data = generate_coronamat(COUNTRY1,COUNTRY2)
# Remove row of all 0 from Italy
#if(COUNTRY2 == "Italy") {
#  data = data[-99,]
#  data = data[-115,]
#}
data = reindex_time(data)["data"][[1]]
data = data[ ((data[,"N"] > 0) | is.na(data[,"new.times"])) & (data[,"D"]>=0),  ]
out_list = reindex_time(data)
data = out_list["data"][[1]]
T = out_list["T"][[1]]
T
data
alpha.start <- runif(T-1)
## caution! this next line may take several minutes (5-10, depanding on
## the speed of your machine) to run.
cfr.out <- EMforCFR(assumed.nu = assumed.nu,
alpha.start.values = alpha.start,
full.data = data,
verb = FALSE,
SEM.var = TRUE,
max.iter = 1000,
tol = 1e-04)
T
assumed.nu
alpha
alpha.start
data
rm(list = ls())
library("dplyr")
library("RcppCNPy")
source("./reich/CFR_estimation.R")
source("./R/jh_process.R")
source("./R/generate_coronamat.R")
source("./reindex_time.R")
# Parameters
DESIRED_L = 20 # Length of the tail of the death distribution, in days. For all results paper, this was 20.
MTTD = 8 # Mean Time To Death
COUNTRY1 = "China"
COUNTRY2 = "Italy"
set.seed(0) #For reproducibility. Can be changed without affecting anything.
min.cases <- 100
#assumed.nu=pnorm(x,mean=MTTD,sd=8.0)
assumed.nu = c(rep(0,5),rep(1,10),rep(0,5))
assumed.nu = assumed.nu/sum(assumed.nu)
data = generate_coronamat(COUNTRY1,COUNTRY2)
# Remove row of all 0 from Italy
#if(COUNTRY2 == "Italy") {
#  data = data[-99,]
#  data = data[-115,]
#}
data = reindex_time(data)["data"][[1]]
data = data[ ((data[,"N"] > 0) | is.na(data[,"new.times"])) & (data[,"D"]>=0),  ]
data = data[,-"new.times"]
data[,-6]
(list = ls())
rm(list = ls())
library("dplyr")
library("RcppCNPy")
source("./reich/CFR_estimation.R")
source("./R/jh_process.R")
source("./R/generate_coronamat.R")
source("./reindex_time.R")
# Parameters
DESIRED_L = 20 # Length of the tail of the death distribution, in days. For all results paper, this was 20.
MTTD = 8 # Mean Time To Death
COUNTRY1 = "China"
COUNTRY2 = "Italy"
set.seed(0) #For reproducibility. Can be changed without affecting anything.
min.cases <- 100
#assumed.nu=pnorm(x,mean=MTTD,sd=8.0)
assumed.nu = c(rep(0,5),rep(1,10),rep(0,5))
assumed.nu = assumed.nu/sum(assumed.nu)
data = generate_coronamat(COUNTRY1,COUNTRY2)
# Remove row of all 0 from Italy
#if(COUNTRY2 == "Italy") {
#  data = data[-99,]
#  data = data[-115,]
#}
data = reindex_time(data)["data"][[1]]
data = data[ ((data[,"N"] > 0) | is.na(data[,"new.times"])) & (data[,"D"]>=0),  ]
data = data[,-6]
out_list = reindex_time(data)
data = out_list["data"][[1]]
T = out_list["T"][[1]]
alpha.start <- runif(T-1)
## caution! this next line may take several minutes (5-10, depanding on
## the speed of your machine) to run.
cfr.out <- EMforCFR(assumed.nu = assumed.nu,
alpha.start.values = alpha.start,
full.data = data,
verb = FALSE,
SEM.var = TRUE,
max.iter = 1000,
tol = 1e-04)
theta <- cfr.out["ests"][[1]]
D.1 = unname(data[1:total_time, "D"])
D.2 = unname(data[(total_time+1):(total_time*2), "D"])
R.1 = unname(data[1:total_time, "R"])
R.2 = unname(data[(total_time+1):(total_time*2), "R"])
print(cfr.out["EMconv"])
print(cfr.out["EM.rel.cfr"])
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
5.1*2.1
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
data
data[36:65,"new.times"] = NA
data[2:31,"new.times"] = 1:30
data
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
# Parameters
DESIRED_L = 20 # Length of the tail of the death distribution, in days. For all results paper, this was 20.
MTTD = 14 # Mean Time To Death
COUNTRY1 = "China"
COUNTRY2 = "Italy"
set.seed(0) #For reproducibility. Can be changed without affecting anything.
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
T
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
data
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
data
data = data[-35:66,]
data
data = data[-(35:66),]
data
data = data[-(35:66),]
data
data[31:66,time]
data[31:66,"time"]
data[31:66,"time"] = 1:34
data[31:66,"time"] = 1:33
data[31:66,"time"] = 1:32
length(data[31:66,"time"])
data[31:66,"time"] = 1:36
data
data
data[31:68,"time"] = 1:38
data
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
N.1
N.2
nlag
times.to.reconstruct
alpha.long
alpha
alpha.long
T
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
naive.rel.cfr
data
dat
unadj.glm.fit <- glm(dat[,"D"] ~ factor(dat[,"new.times"]) + factor(dat[,"grp"]),
offset=log(dat[,"N"]), family=poisson)
unadj.glm.fit
exp(coef(unadj.glm.fit))
exp(coef(unadj.glm.fit))[length(coef())]
idx.to.reconstruct
full.dat
full.data
assumed.nu
nu.idx
length(assumed.nu)
nu.idx
N.1
N.idx
t
t-nlag
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
N.idx
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
data
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
debugSource('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
data[1:L,"new.times"]
!is.na(data[1:L,"new.times"])
all(!is.na(data[1:L,"new.times"]))
all(!is.na(data[1:L,"new.times"]))
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
padarray(data, padsize, padval=0, direction=c("both", "pre", "post"))
padarray
padzeros
data2 = rbind(data,data)
data2
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/R/generate_coronamat.R')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
c1
c2
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
confirmed
jh_data
jh_mat
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
confirmed
jh_data
jh_data
jh_mat
jh_mat[,"time"]+L
jh_mat[,"time"]+10
time_orig = dim(jh_mat)[1]/2
time_orig
jh_mat[1:time_orig,]
jh_mat[1:(time_orig+1),]
jh_mat[1:(time_orig),]
r(1,1,1)
cbind(c(1,1,1),c(1,1,1))
jh_mat
jh_mat
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/R/generate_coronamat.R')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
rbind(z1,c1,z2,c2)
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
jh_mat
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
N.idx
N.idx
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
N.idx
t
idx.to.reconstruct
full.data
N.1
N.1[N.idx]
t
times.to.reconstruct
data
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
full.data
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/R/generate_coronamat.R')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
jh_mat
c1
c2
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
jh_mat
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
jh_mat
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/R/generate_coronamat.R')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/R/generate_coronamat.R')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
jh_mat
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
jh_mat
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
z1
z2
c1
z1
z2
c2
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
jh_mat
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
N.idx
full.data
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
source('~/Code/Berkeley/COVID-19-Projects/cfr-covid-19/relative_cfr.r')
